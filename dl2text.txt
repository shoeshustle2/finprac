import numpy as np
from tensorflow.keras.datasets import imdb
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, Flatten
from tensorflow.keras.preprocessing import sequence
#
# Set the maximum number of words to consider in the vocabulary
max_words = 5000

# Load the IMDB dataset
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=max_words)

# Set the maximum length of the reviews
max_length = 500

# Pad sequences to have the same length
X_train = sequence.pad_sequences(X_train, maxlen=max_length)
X_test = sequence.pad_sequences(X_test, maxlen=max_length)
#
# Build the model
model = Sequential()
model.add(Embedding(max_words, 32, input_length=max_length))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
#
# Train the model
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=3, batch_size=64)
#
# Evaluate the model
scores = model.evaluate(X_test, y_test, verbose=0)
print('Accuracy:', scores[1])

#
# Predict on new data
new_reviews = ['GOOD!', 'worst movie']
word_index = imdb.get_word_index()
new_sequences = [[word_index.get(word.lower(), 0) for word in review.split()] for review in new_reviews]
new_data = sequence.pad_sequences(new_sequences, maxlen=max_length)
predictions = model.predict(new_data)
for i in range(len(new_reviews)):
    sentiment = 'Positive' if predictions[i] >= 0.5 else 'Negative'
    print('Review:', new_reviews[i])
    print('Sentiment:', sentiment)


