#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

// Function to perform Parallel Breadth First Search
void parallelBFS(vector<vector<int>>& graph, int startVertex) {
    int numVertices = graph.size();
    vector<bool> visited(numVertices, false);
    queue<int> bfsQueue;

    visited[startVertex] = true;
    bfsQueue.push(startVertex);

    while (!bfsQueue.empty()) {
        #pragma omp parallel
        {
            queue<int> localQueue;

            #pragma omp for
            for (int i = 0; i < bfsQueue.size(); ++i) {
                int currentVertex;
                #pragma omp critical
                {
                    currentVertex = bfsQueue.front();
                    bfsQueue.pop();
                }

                cout << currentVertex << " ";

                for (int neighbor : graph[currentVertex]) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        localQueue.push(neighbor);
                    }
                }
            }

            #pragma omp critical
            {
                while (!localQueue.empty()) {
                    bfsQueue.push(localQueue.front());
                    localQueue.pop();
                }
            }
        }
    }
}

// Function to perform Parallel Depth First Search
void parallelDFS(vector<vector<int>>& graph, int startVertex) {
    int numVertices = graph.size();
    vector<bool> visited(numVertices, false);
    stack<int> dfsStack;

    dfsStack.push(startVertex);

    while (!dfsStack.empty()) {
        #pragma omp parallel
        {
            stack<int> localStack;

            #pragma omp for
            for (int i = 0; i < dfsStack.size(); ++i) {
                int currentVertex;
                #pragma omp critical
                {
                    currentVertex = dfsStack.top();
                    dfsStack.pop();
                }

                if (!visited[currentVertex]) {
                    visited[currentVertex] = true;
                    cout << currentVertex << " ";

                    for (int neighbor : graph[currentVertex]) {
                        if (!visited[neighbor]) {
                            localStack.push(neighbor);
                        }
                    }
                }
            }

            #pragma omp critical
            {
                while (!localStack.empty()) {
                    dfsStack.push(localStack.top());
                    localStack.pop();
                }
            }
        }
    }
}

// Test the algorithms
int main() {
    vector<vector<int>> graph = {
        {1, 2},       // Node 0 is connected to 1 and 2
        {0, 3, 4},    // Node 1 is connected to 0, 3, and 4
        {0, 5, 6},    // Node 2 is connected to 0, 5, and 6
        {1},          // Node 3 is connected to 1
        {1},          // Node 4 is connected to 1
        {2},          // Node 5 is connected to 2
        {2}           // Node 6 is connected to 2
    };

    cout << "Parallel BFS: ";
    parallelBFS(graph, 0);
    cout << endl;

    cout << "Parallel DFS: ";
    parallelDFS(graph, 0);
    cout << endl;

    return 0;
}
