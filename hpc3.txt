#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

// Function to compute minimum, maximum, sum, and average using parallel reduction
void parallelReduction(const vector<int>& arr, int& minVal, int& maxVal, int& sum, double& average) {
    int n = arr.size();
    minVal = arr[0];
    maxVal = arr[0];
    sum = 0;

    #pragma omp parallel for reduction(min:minVal) reduction(max:maxVal) reduction(+:sum)
    for (int i = 0; i < n; ++i) {
        minVal = min(minVal, arr[i]);
        maxVal = max(maxVal, arr[i]);
        sum += arr[i];
    }

    average = static_cast<double>(sum) / n;
}

// Test the parallel reduction operations
int main() {
    vector<int> numbers = {5, 3, 8, 2, 1, 9, 4, 7, 6};

    int minVal, maxVal, sum;
    double average;

    parallelReduction(numbers, minVal, maxVal, sum, average);

    cout << "Minimum: " << minVal << endl;
    cout << "Maximum: " << maxVal << endl;
    cout << "Sum: " << sum << endl;
    cout << "Average: " << average << endl;

    return 0;
}
